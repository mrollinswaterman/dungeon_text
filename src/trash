    def recieve_reward(self, reward:dict) -> None:
        for entry in reward:
            match entry:
                case "gold":
                    self.gain_gold(reward[entry])
                case "xp":
                    self.gain_xp(reward[entry])
                case "drops":
                    for item in reward[entry]:
                        self.pick_up(item)        
        return None

def load_item(type, save_data) -> "Item":

    def load_weapon():
        from equipment import Weapon
        mold = {}
        mold["damage_dice"] = save_data["damage_dice"]
        mold["crit"] = int(save_data["crit"])
        mold["crit_range"] = save_data["crit_range"]
        mold["weight_class"] = save_data["weight_class"]
        mold["max_dex_bonus"] = int(save_data["max_dex_bonus"])

        obj = Weapon(save_data["id"], save_data["rarity"], mold)
        obj.load(save_data)
        return obj

    def load_armor():
        from equipment import Armor
        mold = {}
        mold["weight_class"] = save_data["weight_class"]
        mold["armor"] = int(save_data["armor"])
        mold["max_dex_bonus"] = int(save_data["max_dex_bonus"])

        obj = Armor(save_data["id"], save_data["rarity"], mold)
        obj.load(save_data)
        return obj

    def load_consumable():
        import item_compendium
        id = save_data["id"]
        obj = item_compendium.dict[id](id, save_data["rarity"], save_data["quantity"])
        return obj

    def load_resource():
        return load_consumable()

    match type:
        case "Weapon":
            return load_weapon()
        case "Armor":
            return load_armor()
        case "Consumable":
            return load_consumable()
        case "Resource":
            return load_resource()
        case _:
            raise ValueError(f"Attempted load of unrecognized item type '{type}'.")